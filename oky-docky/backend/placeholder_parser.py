"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PDF, DOCX, TXT —Ñ–∞–π–ª—ã —Å –Ω–∞–¥–µ–∂–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
"""

import re
import logging
from typing import List, Dict, Set, Optional
from pathlib import Path
import PyPDF2
import docx
from dataclasses import dataclass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class PlaceholderInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–µ"""
    name: str
    count: int
    positions: List[int]
    file_type: str

class AdvancedPlaceholderParser:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
    """
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {name}, {{name}}, [name], <name>
        self.patterns = [
            r'\{([a-zA-Z_][a-zA-Z0-9_]*)\}',          # {name}
            r'\{\{([a-zA-Z_][a-zA-Z0-9_]*)\}\}',      # {{name}}
            r'\[([a-zA-Z_][a-zA-Z0-9_]*)\]',          # [name]
            r'<([a-zA-Z_][a-zA-Z0-9_]*)>',            # <name>
            r'\$\{([a-zA-Z_][a-zA-Z0-9_]*)\}',        # ${name}
        ]
        
        # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        self.compiled_patterns = [re.compile(pattern, re.IGNORECASE) for pattern in self.patterns]
        
    def extract_text_from_pdf(self, file_path: Path) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞
        """
        try:
            text_content = ""
            
            # –ü—Ä–æ–±—É–µ–º PyPDF2
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    try:
                        page_text = page.extract_text()
                        if page_text:
                            text_content += page_text + "\n"
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
                        continue
            
            # –ï—Å–ª–∏ PyPDF2 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            if not text_content.strip():
                logger.warning(f"PyPDF2 –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ {file_path}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å pdfplumber –∏–ª–∏ –¥—Ä—É–≥–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            
            return text_content
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF {file_path}: {e}")
            return ""
    
    def extract_text_from_docx(self, file_path: Path) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX —Ñ–∞–π–ª–∞
        """
        try:
            doc = docx.Document(file_path)
            text_content = ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            for paragraph in doc.paragraphs:
                text_content += paragraph.text + "\n"
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        text_content += cell.text + " "
                text_content += "\n"
                        
            return text_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ DOCX {file_path}: {e}")
            return ""
    
    def extract_text_from_txt(self, file_path: Path) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'cp1251', 'latin-1', 'cp1252']
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as file:
                        return file.read()
                except UnicodeDecodeError:
                    continue
                    
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ {file_path}")
            return ""
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ TXT {file_path}: {e}")
            return ""
    
    def extract_text_from_file(self, file_path: Path) -> str:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
        """
        file_extension = file_path.suffix.lower()
        
        if file_extension == '.pdf':
            return self.extract_text_from_pdf(file_path)
        elif file_extension == '.docx':
            return self.extract_text_from_docx(file_path)
        elif file_extension in ['.txt', '.text']:
            return self.extract_text_from_txt(file_path)
        else:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return ""
    
    def find_placeholders_in_text(self, text: str) -> Dict[str, PlaceholderInfo]:
        """
        –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        """
        placeholders = {}
        
        for pattern in self.compiled_patterns:
            matches = list(pattern.finditer(text))
            
            for match in matches:
                placeholder_name = match.group(1).lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
                
                if placeholder_name not in placeholders:
                    placeholders[placeholder_name] = PlaceholderInfo(
                        name=placeholder_name,
                        count=0,
                        positions=[],
                        file_type="text"
                    )
                
                placeholders[placeholder_name].count += 1
                placeholders[placeholder_name].positions.append(match.start())
        
        return placeholders
    
    def analyze_template_file(self, file_path: Path) -> Dict[str, PlaceholderInfo]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        """
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —à–∞–±–ª–æ–Ω–∞: {file_path.name}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text_content = self.extract_text_from_file(file_path)
        
        if not text_content:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ {file_path.name}")
            return {}
        
        logger.debug(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
        logger.debug(f"–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {text_content[:200]}...")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        placeholders = self.find_placeholders_in_text(text_content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_extension = file_path.suffix.lower()
        for placeholder_info in placeholders.values():
            placeholder_info.file_type = file_extension
        
        if placeholders:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {len(placeholders)}")
            for name, info in placeholders.items():
                logger.info(f"   - {{{name}}} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {info.count} —Ä–∞–∑)")
        else:
            logger.warning(f"‚ö†Ô∏è –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {file_path.name}")
            
        return placeholders
    
    def scan_templates_directory(self, templates_dir: Path) -> Dict[str, Dict[str, PlaceholderInfo]]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
        """
        logger.info(f"üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {templates_dir}")
        
        results = {}
        supported_extensions = ['.pdf', '.docx', '.txt']
        
        for file_path in templates_dir.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in supported_extensions:
                try:
                    placeholders = self.analyze_template_file(file_path)
                    if placeholders:
                        results[str(file_path)] = placeholders
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path.name}: {e}")
        
        logger.info(f"üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
        return results
    
    def generate_form_fields(self, placeholders: Dict[str, PlaceholderInfo]) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        """
        form_fields = []
        
        for name, info in placeholders.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            field_type = self._detect_field_type(name)
            
            field = {
                'name': name,
                'label': self._generate_label(name),
                'type': field_type,
                'required': True,
                'placeholder': f'–í–≤–µ–¥–∏—Ç–µ {self._generate_label(name).lower()}',
                'validation': self._get_validation_rules(field_type),
                'occurrences': info.count
            }
            
            form_fields.append(field)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        form_fields.sort(key=lambda x: self._get_field_priority(x['name']))
        
        return form_fields
    
    def _detect_field_type(self, field_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–º–µ–Ω–∏"""
        field_name = field_name.lower()
        
        if any(keyword in field_name for keyword in ['email', 'mail', '–ø–æ—á—Ç–∞']):
            return 'email'
        elif any(keyword in field_name for keyword in ['phone', 'tel', '—Ç–µ–ª–µ—Ñ–æ–Ω']):
            return 'tel'
        elif any(keyword in field_name for keyword in ['date', '–¥–∞—Ç–∞']):
            return 'date'
        elif any(keyword in field_name for keyword in ['number', 'num', '–Ω–æ–º–µ—Ä', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']):
            return 'number'
        elif any(keyword in field_name for keyword in ['url', 'website', '—Å–∞–π—Ç']):
            return 'url'
        else:
            return 'text'
    
    def _generate_label(self, field_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–π –º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—è"""
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        translations = {
            'name': '–ò–º—è',
            'firstname': '–ò–º—è',
            'lastname': '–§–∞–º–∏–ª–∏—è',
            'email': 'Email',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'date': '–î–∞—Ç–∞',
            'address': '–ê–¥—Ä–µ—Å',
            'city': '–ì–æ—Ä–æ–¥',
            'company': '–ö–æ–º–ø–∞–Ω–∏—è',
            'position': '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
            'test': '–¢–µ—Å—Ç',
            'data': '–î–∞–Ω–Ω—ã–µ'
        }
        
        if field_name.lower() in translations:
            return translations[field_name.lower()]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        return field_name.replace('_', ' ').title()
    
    def _get_validation_rules(self, field_type: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–ª—è"""
        rules = {
            'email': {'pattern': r'^[^\s@]+@[^\s@]+\.[^\s@]+$', 'message': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'},
            'tel': {'pattern': r'^[\+]?[\d\s\-\(\)]+$', 'message': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'},
            'url': {'pattern': r'^https?:\/\/.+', 'message': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL'},
            'number': {'pattern': r'^\d+$', 'message': '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ'}
        }
        
        return rules.get(field_type, {})
    
    def _get_field_priority(self, field_name: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        priorities = {
            'name': 1, 'firstname': 1, 'lastname': 2,
            'email': 3, 'phone': 4, 'date': 5,
            'company': 6, 'position': 7
        }
        
        return priorities.get(field_name.lower(), 100)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = AdvancedPlaceholderParser()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
    template_path = Path("templates/document_template.pdf")
    if template_path.exists():
        placeholders = parser.analyze_template_file(template_path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        form_fields = parser.generate_form_fields(placeholders)
        
        print("üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã:")
        for field in form_fields:
            print(f"  - {field['label']} ({field['type']})")
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    templates_dir = Path("templates")
    if templates_dir.exists():
        all_results = parser.scan_templates_directory(templates_dir)
        
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_results)}")
        
        total_placeholders = sum(len(placeholders) for placeholders in all_results.values())
        print(f"  - –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {total_placeholders}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    main()
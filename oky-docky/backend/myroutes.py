from fastapi import APIRouter, Request, UploadFile, File, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from typing import Dict, Optional, List
import os
from pydantic import BaseModel
from typing import Dict
import uuid


import traceback

import json
from datetime import datetime
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from pdf_processor import PDFProcessor
from storage import Storage
from models import FormData

# –†–æ—É—Ç–µ—Ä - –í–°–ï –ü–£–¢–ò –ó–î–ï–°–¨!

router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
pdf_processor = PDFProcessor()
storage = Storage()
# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å:
try:
    import fitz
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º PyMuPDF")
except ImportError:
    print("‚ö†Ô∏è PyMuPDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    from pdf_processor_fallback import FallbackPDFProcessor
    pdf_processor = FallbackPDFProcessor()
# ===========================
# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê (–§–†–û–ù–¢–ï–ù–î)
# ===========================

@router.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –Ω–∞—à–∏–º –∫—Ä–∞—Å–∏–≤—ã–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º"""
    
    # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
    html_file_path = Path("/workspaces/oky-docky/oky-docky/FRONTEND_UI/HTML/index/mainpage.html")
    
    try:
        with open(html_file_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="""
        <h1>üöÄ Oky Docky API</h1>
        <p>Frontend —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞:</p>
        <ul>
            <li><a href="/docs">/docs - Swagger UI</a></li>
            <li><a href="/api/templates">/api/templates - –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤</a></li>
            <li><a href="/health">/health - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</a></li>
        </ul>
        """)

# ===========================
# –°–õ–£–ñ–ï–ë–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ===========================

@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0",
        "service": "oky-docky"
    }

@router.get("/info")
async def app_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    templates_count = len(list(Path("templates").glob("*.json")))
    files_count = len(list(Path("generated_files").glob("*"))) if Path("generated_files").exists() else 0
    
    return {
        "name": "Oky Docky",
        "version": "2.0",
        "description": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",
        "author": "Claude + Human",
        "stats": {
            "templates": templates_count,
            "generated_files": files_count
        },
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc",
            "health": "/health",
            "api": "/api/"
        }
    }

@router.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        templates_count = len(list(pdf_processor.templates_dir.glob("*.json")))
        generated_files_count = len(list(storage.local_storage.glob("*"))) if storage.local_storage.exists() else 0
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–∞—Ö
        total_variables = 0
        for json_file in pdf_processor.templates_dir.glob("*.json"):
            with open(json_file, encoding='utf-8') as f:
                metadata = json.load(f)
                total_variables += len(metadata.get('variables', []))
        
        return {
            "templates_count": templates_count,
            "generated_files_count": generated_files_count,
            "total_variables": total_variables,
            "uptime": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# ===========================
# –ù–û–í–´–ï API –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê
# ===========================

@router.get("/api/templates")
async def get_templates():
    """
    –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞—Ö
    """
    templates = []
    
    try:
        for json_file in pdf_processor.templates_dir.glob("*.json"):
            with open(json_file, encoding='utf-8') as f:
                metadata = json.load(f)
                
                # –ü–æ–ª—É—á–∞–µ–º PDF —Ñ–∞–π–ª
                pdf_file = pdf_processor.templates_dir / f"{metadata['id']}.pdf"
                
                if pdf_file.exists():
                    # –ù–û–í–û–ï! –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞—Ö
                    try:
                        placeholders = pdf_processor.advanced_parser.analyze_template_file(pdf_file)
                        form_fields = pdf_processor.advanced_parser.generate_form_fields(placeholders)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
                        metadata['placeholders'] = {
                            name: {
                                'name': info.name,
                                'count': info.count,
                                'positions': info.positions,
                                'file_type': info.file_type
                            } for name, info in placeholders.items()
                        }
                        metadata['form_fields'] = form_fields
                        metadata['stats'] = {
                            'total_placeholders': len(placeholders),
                            'total_occurrences': sum(p.count for p in placeholders.values())
                        }
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–∞ {metadata['id']}: {e}")
                        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                        metadata['placeholders'] = {}
                        metadata['form_fields'] = []
                        metadata['stats'] = {
                            'total_placeholders': len(metadata.get('variables', [])),
                            'total_occurrences': 0
                        }
                
                templates.append(metadata)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        templates.sort(key=lambda x: x.get('uploaded_at', ''), reverse=True)
        
        return {
            "success": True,
            "templates": {t['name']: t for t in templates},  # –§–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ frontend
            "total": len(templates),
            "last_scan": datetime.now().isoformat()
        }
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")

@router.get("/api/template/{template_name}")
async def get_template_info(template_name: str):
    """
    –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
    """
    try:
        # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        template_found = None
        
        for json_file in pdf_processor.templates_dir.glob("*.json"):
            with open(json_file, encoding='utf-8') as f:
                metadata = json.load(f)
                if metadata.get('name') == template_name or f"{metadata.get('id')}.pdf" == template_name:
                    template_found = metadata
                    break
        
        if not template_found:
            raise HTTPException(status_code=404, detail=f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        pdf_file = pdf_processor.templates_dir / f"{template_found['id']}.pdf"
        if pdf_file.exists():
            placeholders = pdf_processor.advanced_parser.analyze_template_file(pdf_file)
            form_fields = pdf_processor.advanced_parser.generate_form_fields(placeholders)
            
            template_found['placeholders'] = {
                name: {
                    'name': info.name,
                    'count': info.count,
                    'positions': info.positions,
                    'file_type': info.file_type
                } for name, info in placeholders.items()
            }
            template_found['form_fields'] = form_fields
            template_found['stats'] = {
                'total_placeholders': len(placeholders),
                'total_occurrences': sum(p.count for p in placeholders.values())
            }
        
        return {
            "success": True,
            "template": template_found
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ: {str(e)}")

@router.get("/api/debug/placeholder_test/{template_name}")
async def debug_placeholder_test(template_name: str):
    """
    –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    """
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª
        template_path = None
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –ø—Ä—è–º–æ–º—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        direct_path = pdf_processor.templates_dir / template_name
        if direct_path.exists():
            template_path = direct_path
        else:
            # –ò—â–µ–º –ø–æ ID –≤ JSON —Ñ–∞–π–ª–∞—Ö
            for json_file in pdf_processor.templates_dir.glob("*.json"):
                with open(json_file, encoding='utf-8') as f:
                    metadata = json.load(f)
                    if metadata.get('name') == template_name:
                        template_path = pdf_processor.templates_dir / f"{metadata['id']}.pdf"
                        break
        
        if not template_path or not template_path.exists():
            raise HTTPException(status_code=404, detail=f"–§–∞–π–ª {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = pdf_processor.debug_template(str(template_path))
        
        return {
            "success": True,
            "debug_info": debug_info
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")

@router.post("/api/rescan_templates")
async def rescan_templates():
    """
    –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    """
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        pdf_processor.template_cache.clear()
        
        # –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        rescanned_count = 0
        for json_file in pdf_processor.templates_dir.glob("*.json"):
            try:
                with open(json_file, encoding='utf-8') as f:
                    metadata = json.load(f)
                
                pdf_file = pdf_processor.templates_dir / f"{metadata['id']}.pdf"
                if pdf_file.exists():
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                    variables = pdf_processor.extract_variables_from_template(str(pdf_file))
                    metadata['variables'] = variables
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    with open(json_file, 'w', encoding='utf-8') as f:
                        json.dump(metadata, f, indent=2, ensure_ascii=False)
                    
                    rescanned_count += 1
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {json_file}: {e}")
        
        return {
            "success": True,
            "message": "–®–∞–±–ª–æ–Ω—ã –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã",
            "total_templates": rescanned_count,
            "scan_time": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

# ===========================
# –û–°–¢–ê–õ–¨–ù–´–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ===========================

@router.post("/api/upload-template")
async def upload_template(
    file: UploadFile = File(...),
    form_id: str = None,
    name: str = None
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ PDF —à–∞–±–ª–æ–Ω–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if file.content_type != "application/pdf":
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not form_id:
        form_id = str(uuid.uuid4())[:8]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    template_path = pdf_processor.templates_dir / f"{form_id}.pdf"
    
    try:
        content = await file.read()
        with open(template_path, "wb") as f:
            f.write(content)
        
        # –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        variables = pdf_processor.extract_variables_from_template(str(template_path))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "id": form_id,
            "name": name or file.filename,
            "variables": variables,
            "uploaded_at": datetime.now().isoformat(),
            "file_size": len(content),
            "original_filename": file.filename
        }
        
        with open(pdf_processor.templates_dir / f"{form_id}.json", "w", encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        return {
            "success": True,
            "form_id": form_id,
            "name": metadata["name"],
            "variables": variables,
            "placeholders_found": len(variables),
            "message": f"–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(variables)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
        }
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        if template_path.exists():
            template_path.unlink()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@router.get("/api/template/{form_id}")
async def get_template_info_by_id(form_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —à–∞–±–ª–æ–Ω–µ –ø–æ ID"""
    metadata_path = pdf_processor.templates_dir / f"{form_id}.json"
    
    if not metadata_path.exists():
        raise HTTPException(status_code=404, detail="–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        with open(metadata_path, encoding='utf-8') as f:
            metadata = json.load(f)
        return metadata
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@router.get("/api/template/{form_id}/variables")
async def get_template_variables(form_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ"""
    template_path = pdf_processor.templates_dir / f"{form_id}.pdf"
    
    if not template_path.exists():
        raise HTTPException(status_code=404, detail="–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        variables = pdf_processor.extract_variables_from_template(str(template_path))
        
        return {
            "form_id": form_id,
            "variables": variables,
            "count": len(variables)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {str(e)}")

@router.delete("/api/template/{form_id}")
async def delete_template(form_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    template_path = pdf_processor.templates_dir / f"{form_id}.pdf"
    metadata_path = pdf_processor.templates_dir / f"{form_id}.json"
    
    if not template_path.exists():
        raise HTTPException(status_code=404, detail="–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        template_path.unlink()
        if metadata_path.exists():
            metadata_path.unlink()
        
        return {
            "success": True,
            "message": f"–®–∞–±–ª–æ–Ω {form_id} —É–¥–∞–ª–µ–Ω"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

# –ó–∞–º–µ–Ω–∏ –≤ myroutes.py —Ñ—É–Ω–∫—Ü–∏—é generate_document_by_name –Ω–∞ —ç—Ç—É:

@router.post("/api/generate/{template_name}")
async def generate_document_by_name(
    template_name: str,
    request: Request
):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend)
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ FormData
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FormData
        form_data = await request.form()
        
        format_type = form_data.get('format_type', 'pdf')
        field_data_str = form_data.get('field_data', '{}')
        
        print(f"üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: format_type={format_type}, field_data={field_data_str}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π
        try:
            import json
            fields = json.loads(field_data_str)
            print(f"üìù –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {fields}")
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            raise HTTPException(status_code=400, detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ field_data: {e}")
        
        # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏
        template_found = None
        for json_file in pdf_processor.templates_dir.glob("*.json"):
            with open(json_file, encoding='utf-8') as f:
                metadata = json.load(f)
                if metadata.get('name') == template_name or metadata.get('original_filename') == template_name:
                    template_found = metadata
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {metadata['name']} (ID: {metadata['id']})")
                    break
        
        if not template_found:
            print(f"‚ùå –®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ü–æ–∫–∞–∂–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            available_templates = []
            for json_file in pdf_processor.templates_dir.glob("*.json"):
                with open(json_file, encoding='utf-8') as f:
                    metadata = json.load(f)
                    available_templates.append(metadata.get('name', 'Unknown'))
            
            raise HTTPException(
                status_code=404, 
                detail=f"–®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_templates}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
        pdf_path = pdf_processor.templates_dir / f"{template_found['id']}.pdf"
        if not pdf_path.exists():
            raise HTTPException(
                status_code=404, 
                detail=f"PDF —Ñ–∞–π–ª –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF: {pdf_path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
        try:
            result_bytes = pdf_processor.process_pdf_with_variables(
                str(pdf_path),
                fields,
                format_type
            )
            print(f"‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(result_bytes)} –±–∞–π—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ content-type
        if format_type == "png":
            extension = "png"
            content_type = "image/png"
        else:
            extension = "pdf"
            content_type = "application/pdf"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{template_found['id']}_{timestamp}_{uuid.uuid4().hex[:6]}.{extension}"
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª: {filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            file_url = await storage.save_file(
                result_bytes,
                filename,
                content_type
            )
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        return {
            "success": True,
            "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
            "output_file": filename,
            "format": format_type,
            "download_url": file_url,
            "generated_at": datetime.now().isoformat()
        }
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


# –¢–ê–ö–ñ–ï –¥–æ–±–∞–≤—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:

@router.get("/api/debug/form_data_test")
async def debug_form_data_test():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    templates = []
    for json_file in pdf_processor.templates_dir.glob("*.json"):
        with open(json_file, encoding='utf-8') as f:
            metadata = json.load(f)
            templates.append({
                "id": metadata.get('id'),
                "name": metadata.get('name'),
                "original_filename": metadata.get('original_filename'),
                "variables": metadata.get('variables', []),
                "pdf_exists": (pdf_processor.templates_dir / f"{metadata['id']}.pdf").exists()
            })
    
    return {
        "available_templates": templates,
        "templates_dir": str(pdf_processor.templates_dir),
        "storage_dir": str(storage.local_storage)
    }
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    template_path = pdf_processor.templates_dir / f"{request.form_id}.pdf"
    if not template_path.exists():
        raise HTTPException(status_code=404, detail="–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
        result_bytes = pdf_processor.process_pdf_with_variables(
            str(template_path),
            request.variables,
            request.output_format
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ content-type
        if request.output_format == "png":
            extension = "png"
            content_type = "image/png"
        else:
            extension = "pdf"
            content_type = "application/pdf"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{request.form_id}_{timestamp}_{uuid.uuid4().hex[:6]}.{extension}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_url = await storage.save_file(
            result_bytes,
            filename,
            content_type
        )
        
        return {
            "success": True,
            "file_url": file_url,
            "filename": filename,
            "format": request.output_format,
            "generated_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

# –ù–û–í–û–ï! –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å frontend)
@router.post("/api/generate/{template_name}")
async def generate_document_by_name(
    template_name: str,
    format_type: str,
    field_data: str
):
    """
    –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend)
    """
    try:
        import json
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π
        try:
            fields = json.loads(field_data)
        except json.JSONDecodeError:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ field_data")
        
        # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏
        template_found = None
        for json_file in pdf_processor.templates_dir.glob("*.json"):
            with open(json_file, encoding='utf-8') as f:
                metadata = json.load(f)
                if metadata.get('name') == template_name:
                    template_found = metadata
                    break
        
        if not template_found:
            raise HTTPException(status_code=404, detail=f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        from models import FormData, OutputFormat
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
        format_mapping = {
            'png': OutputFormat.PNG_FREE,
            'pdf': OutputFormat.PDF_LOCKED,
            'pdf_editable': OutputFormat.PDF_EDITABLE
        }
        
        output_format = format_mapping.get(format_type, OutputFormat.PDF_LOCKED)
        
        request = FormData(
            form_id=template_found['id'],
            variables=fields,
            output_format=output_format
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        from fastapi import BackgroundTasks
        result = await generate_document(request, BackgroundTasks())
        
        return result
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

@router.post("/api/generate-batch")
async def generate_batch(
    form_id: str, 
    users_data: List[Dict[str, str]], 
    format: str = "pdf"
):
    """–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    results = []
    
    for i, user_data in enumerate(users_data):
        try:
            request = FormData(
                form_id=form_id,
                variables=user_data,
                output_format=format
            )
            result = await generate_document(request, BackgroundTasks())
            results.append({
                "index": i,
                "success": True,
                "data": result
            })
        except Exception as e:
            results.append({
                "index": i,
                "success": False,
                "error": str(e),
                "user_data": user_data
            })
    
    success_count = sum(1 for r in results if r["success"])
    
    return {
        "results": results,
        "total": len(results),
        "successful": success_count,
        "failed": len(results) - success_count
    }

class ValidateRequest(BaseModel):
    form_id: str
    variables: Dict[str, str]

@router.post("/api/validate-variables")
async def validate_variables(payload: ValidateRequest):
    try:
        template_variables = pdf_processor.extract_variables_from_template(
            str(pdf_processor.templates_dir / f"{payload.form_id}.pdf")
        )

        missing_variables = []
        empty_variables = []

        for var in template_variables:
            if var not in payload.variables:
                missing_variables.append(var)
            elif not (payload.variables[var] or "").strip():
                empty_variables.append(var)

        is_valid = not missing_variables and not empty_variables

        return {
            "valid": is_valid,
            "missing_variables": missing_variables,
            "empty_variables": empty_variables,
            "provided_variables": list(payload.variables.keys()),
            "required_variables": template_variables
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")

# ===========================
# –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –§–ê–ô–õ–û–í
# ===========================

@router.get("/files/{filename}")
async def get_file(filename: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    file_path = storage.local_storage / filename
    
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content-type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if filename.endswith('.png'):
        media_type = "image/png"
    elif filename.endswith('.pdf'):
        media_type = "application/pdf"
    else:
        media_type = "application/octet-stream"
    
    return FileResponse(
        file_path, 
        media_type=media_type,
        filename=filename
    )

@router.get("/api/download/{filename}")
async def download_file(filename: str):
    """
    –ù–û–í–û–ï: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å frontend)
    """
    return await get_file(filename)
# –î–û–ë–ê–í–¨ –≠–¢–ò –≠–ù–î–ü–û–ò–ù–¢–´ –í –ö–û–ù–ï–¶ backend/myroutes.py (–ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π):

@router.post("/api/generate/{template_name}")
async def generate_document_by_name(
    template_name: str,
    request: Request
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FormData
        form_data = await request.form()
        
        format_type = form_data.get('format_type', 'pdf')
        field_data_str = form_data.get('field_data', '{}')
        
        print(f"üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: format_type={format_type}, field_data={field_data_str}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π
        try:
            fields = json.loads(field_data_str)
            print(f"üìù –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {fields}")
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            raise HTTPException(status_code=400, detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ field_data: {e}")
        
        # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ –∏–º–µ–Ω–∏
        template_found = None
        for json_file in pdf_processor.templates_dir.glob("*.json"):
            with open(json_file, encoding='utf-8') as f:
                metadata = json.load(f)
                if metadata.get('name') == template_name or metadata.get('original_filename') == template_name:
                    template_found = metadata
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {metadata['name']} (ID: {metadata['id']})")
                    break
        
        if not template_found:
            print(f"‚ùå –®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ü–æ–∫–∞–∂–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            available_templates = []
            for json_file in pdf_processor.templates_dir.glob("*.json"):
                with open(json_file, encoding='utf-8') as f:
                    metadata = json.load(f)
                    available_templates.append(metadata.get('name', 'Unknown'))
            
            raise HTTPException(
                status_code=404, 
                detail=f"–®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_templates}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
        pdf_path = pdf_processor.templates_dir / f"{template_found['id']}.pdf"
        if not pdf_path.exists():
            raise HTTPException(
                status_code=404, 
                detail=f"PDF —Ñ–∞–π–ª –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF: {pdf_path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
        try:
            result_bytes = pdf_processor.process_pdf_with_variables(
                str(pdf_path),
                fields,
                format_type
            )
            print(f"‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(result_bytes)} –±–∞–π—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ content-type
        if format_type == "png":
            extension = "png"
            content_type = "image/png"
        else:
            extension = "pdf"
            content_type = "application/pdf"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{template_found['id']}_{timestamp}_{uuid.uuid4().hex[:6]}.{extension}"
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª: {filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            file_url = await storage.save_file(
                result_bytes,
                filename,
                content_type
            )
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        return {
            "success": True,
            "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
            "output_file": filename,
            "format": format_type,
            "download_url": file_url,
            "generated_at": datetime.now().isoformat()
        }
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@router.get("/api/debug/form_data_test")
async def debug_form_data_test():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    templates = []
    for json_file in pdf_processor.templates_dir.glob("*.json"):
        with open(json_file, encoding='utf-8') as f:
            metadata = json.load(f)
            templates.append({
                "id": metadata.get('id'),
                "name": metadata.get('name'),
                "original_filename": metadata.get('original_filename'),
                "variables": metadata.get('variables', []),
                "pdf_exists": (pdf_processor.templates_dir / f"{metadata['id']}.pdf").exists()
            })
    
    return {
        "available_templates": templates,
        "templates_dir": str(pdf_processor.templates_dir),
        "storage_dir": str(storage.local_storage)
    }
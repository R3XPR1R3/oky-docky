"""
Oky Docky - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
Main –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ FastAPI (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤!)

–ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤—Å–µ –ø—É—Ç–∏ –≤ myroutes.py
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import HTTPException
from pathlib import Path
import os
import logging
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—É—Ç–µ—Ä
from myroutes import router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="Oky Docky API",
    description="üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
    version="2.0",
    docs_url="/docs",  # Swagger UI
    redoc_url="/redoc"  # ReDoc
)

# ===========================
# MIDDLEWARE
# ===========================



# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = datetime.now()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    process_time = (datetime.now() - start_time).total_seconds()
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    return response

# ===========================
# STARTUP/SHUTDOWN
# ===========================

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Oky Docky...")
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    folders_to_create = [
        Path("templates"),
        Path("generated_files"),
        Path("logs")
    ]
    
    for folder in folders_to_create:
        folder.mkdir(exist_ok=True)
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ {folder} –≥–æ—Ç–æ–≤–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    templates_count = len(list(Path("templates").glob("*.json")))
    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_count}")
    
    logger.info("üéâ Oky Docky –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Oky Docky...")

# ===========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# ===========================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–ö—Ä–∞—Å–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫"""
    logger.warning(f"HTTP {exc.status_code}: {exc.detail} - {request.url}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc} - {request.url}")
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "status_code": 500,
            "timestamp": datetime.now().isoformat()
        }
    )

# ===========================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–û–í
# ===========================

# –í–°–ï –ü–£–¢–ò –¢–û–õ–¨–ö–û –í –†–û–£–¢–ï–†–ï!
app.include_router(router)

# –ì–æ—Ç–æ–≤–æ! –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ!
"""
Oky Docky - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
Main –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ FastAPI –° –£–õ–£–ß–®–ï–ù–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, Response, FileResponse
from fastapi.exceptions import HTTPException
from fastapi.staticfiles import StaticFiles
from pathlib import Path
import os
import logging
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—É—Ç–µ—Ä
from myroutes import router

# —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–∞–ø–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
BASE_DIR = Path(__file__).resolve().parent.parent   # /workspaces/oky-docky/oky-docky
FRONTEND_DIR = BASE_DIR / "FRONTEND_UI"            # .../FRONTEND_UI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="Oky Docky API",
    description="üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
    version="2.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# ===========================
# –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –ü–ê–ü–û–ö
# ===========================

def ensure_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã"""
    dirs_to_create = [
        "FRONTEND_UI",
        "FRONTEND_UI/JS",
        "FRONTEND_UI/JS/SCRIPTS", 
        "FRONTEND_UI/CSS",
        "FRONTEND_UI/HTML",
        "FRONTEND_UI/HTML/index",
        "generated_files",
        "templates",
        "logs"
    ]
    
    for dir_path in dirs_to_create:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ {dir_path} –≥–æ—Ç–æ–≤–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    important_files = {
        "/workspaces/oky-docky/oky-docky/FRONTEND_UI/HTML/index/mainpage.html": "HTML —Ñ–∞–π–ª –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        FRONTEND_DIR / "HTML/index/mainpage.html": "HTML —Ñ–∞–π–ª –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        FRONTEND_DIR / "JS/SCRIPTS/main.js":      "–ì–ª–∞–≤–Ω—ã–π JavaScript —Ñ–∞–π–ª"
        }

    
    
    for file_path, description in important_files.items():
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            logger.info(f"‚úÖ {description}: {file_path} ({size} –±–∞–π—Ç)")
        else:
            logger.error(f"‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢ {description}: {file_path}")

# ===========================
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í
# ===========================

def setup_static_files():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫
        frontend_path = Path("FRONTEND_UI")
        if not frontend_path.exists():
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ {frontend_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ - –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï!
        app.mount("/static", StaticFiles(directory=FRONTEND_DIR),            name="static")
        logger.info("üìÇ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏–∫–∞: /static -> FRONTEND_UI")
        
        # JS —Ñ–∞–π–ª—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)
        js_path = Path("FRONTEND_UI/JS")
        if js_path.exists():
            app.mount("/js",     StaticFiles(directory=FRONTEND_DIR / "JS"),     name="js")
            logger.info("üìú JS —Ñ–∞–π–ª—ã: /js -> FRONTEND_UI/JS")
        
        # CSS —Ñ–∞–π–ª—ã
        css_path = Path("FRONTEND_UI/CSS")
        if css_path.exists():
            app.mount("/css",    StaticFiles(directory=FRONTEND_DIR / "CSS"),    name="css")
            logger.info("üé® CSS —Ñ–∞–π–ª—ã: /css -> FRONTEND_UI/CSS")
        
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        generated_path = Path("generated_files")
        if generated_path.exists():
            app.mount("/files", StaticFiles(directory="generated_files"), name="files")
            logger.info("üìÑ –§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: /files -> generated_files")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫–∏
ensure_directories()

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
static_setup_success = setup_static_files()

# ===========================
# MIDDLEWARE
# ===========================

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = datetime.now()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
    process_time = (datetime.now() - start_time).total_seconds()
    
    # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–∏–º
    should_log = not any(request.url.path.startswith(prefix) for prefix in ["/static", "/css", "/js", "/files"])
    
    if should_log or response.status_code >= 400:
        status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
        logger.info(
            f"{status_emoji} {request.method} {request.url.path} - "
            f"Status: {response.status_code} - "
            f"Time: {process_time:.3f}s"
        )
    
    return response

# ===========================
# –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –†–û–£–¢–´ –î–õ–Ø –°–¢–ê–¢–ò–ö–ò (–û–¢–õ–ê–î–ö–ê)
# ===========================

@app.get("/debug/static-check")
async def debug_static_check():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    check_result = {
        "directories": {},
        "files": {},
        "mounted_paths": [],
        "recommendations": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
    important_dirs = ["FRONTEND_UI", "FRONTEND_UI/JS", "FRONTEND_UI/JS/SCRIPTS", "FRONTEND_UI/CSS", "FRONTEND_UI/HTML"]
    for dir_path in important_dirs:
        path = Path(dir_path)
        check_result["directories"][dir_path] = {
            "exists": path.exists(),
            "is_dir": path.is_dir() if path.exists() else False,
            "files_count": len(list(path.iterdir())) if path.exists() and path.is_dir() else 0
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    important_files = [
        "/workspaces/oky-docky/oky-docky/FRONTEND_UI/HTML/index/mainpage.html",
        "/workspaces/oky-docky/oky-docky/FRONTEND_UI/JS/SCRIPTS/main.js"
    ]
    for file_path in important_files:
        path = Path(file_path)
        check_result["files"][file_path] = {
            "exists": path.exists(),
            "size": path.stat().st_size if path.exists() else 0,
            "readable": True
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JS —Ñ–∞–π–ª–∞
        if file_path.endswith("main.js") and path.exists():
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    check_result["files"][file_path]["has_oky_class"] = "OkyDockyApp" in content
                    check_result["files"][file_path]["has_init"] = "init()" in content
            except Exception as e:
                check_result["files"][file_path]["read_error"] = str(e)
    
    # –°–ø–∏—Å–æ–∫ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
    check_result["mounted_paths"] = [
        "/static -> FRONTEND_UI",
        "/js -> FRONTEND_UI/JS",
        "/css -> FRONTEND_UI/CSS", 
        "/files -> generated_files"
    ]
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not check_result["files"]["/workspaces/oky-docky/oky-docky/FRONTEND_UI/JS/SCRIPTS/main.js"]["exists"]:
        check_result["recommendations"].append("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª FRONTEND_UI/JS/SCRIPTS/main.js")

        print("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª FRONTEND_UI/JS/SCRIPTS/main.js")
        
    if not check_result["files"]["/workspaces/oky-docky/oky-docky/FRONTEND_UI/HTML/index/mainpage.html"]["exists"]:
        check_result["recommendations"].append("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª FRONTEND_UI/HTML/index/mainpage.html")
    
        print("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª FRONTEND_UI/HTML/index/mainpage.html")

    if not static_setup_success:
        check_result["recommendations"].append("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
    
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")

    if len(check_result["recommendations"]) == 0:
        check_result["recommendations"].append("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!")
    
    return check_result

@app.get("/test-js")
async def test_js_loading():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ JS"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ JS</title>
        <style>
            body { font-family: Arial, sans-serif; padding: 2rem; }
            .test-result { padding: 1rem; margin: 1rem 0; border-radius: 5px; }
            .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        </style>
    </head>
    <body>
        <h1>üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript</h1>
        <div id="results"></div>
        
        <h2>–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏:</h2>
        <ol id="attempts"></ol>
        
        <script>
            const results = document.getElementById('results');
            const attempts = document.getElementById('attempts');
            
            function addResult(message, success = true) {
                const div = document.createElement('div');
                div.className = `test-result ${success ? 'success' : 'error'}`;
                div.textContent = message;
                results.appendChild(div);
            }
            
            function addAttempt(path, success = false) {
                const li = document.createElement('li');
                li.innerHTML = `<strong>${path}</strong> - ${success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`;
                attempts.appendChild(li);
            }
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ JS
            const testPaths = [
                '/static/JS/SCRIPTS/main.js',
                '/js/SCRIPTS/main.js', 
                '/FRONTEND_UI/JS/SCRIPTS/main.js',
                '/static/main.js'
            ];
            
            let pathIndex = 0;
            
            function testNextPath() {
                if (pathIndex >= testPaths.length) {
                    addResult('‚ùå –ù–∏ –æ–¥–∏–Ω –ø—É—Ç—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª!', false);
                    return;
                }
                
                const currentPath = testPaths[pathIndex];
                const script = document.createElement('script');
                script.src = currentPath;
                
                script.onload = () => {
                    addAttempt(currentPath, true);
                    addResult(`‚úÖ JS —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${currentPath}`, true);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞
                    setTimeout(() => {
                        if (typeof OkyDockyApp !== 'undefined') {
                            addResult('‚úÖ –ö–ª–∞—Å—Å OkyDockyApp –Ω–∞–π–¥–µ–Ω!', true);
                        } else if (typeof app !== 'undefined') {
                            addResult('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è app –Ω–∞–π–¥–µ–Ω–∞!', true);
                        } else {
                            addResult('‚ö†Ô∏è JS –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –∫–ª–∞—Å—Å OkyDockyApp –Ω–µ –Ω–∞–π–¥–µ–Ω', false);
                        }
                    }, 100);
                };
                
                script.onerror = () => {
                    addAttempt(currentPath, false);
                    pathIndex++;
                    testNextPath();
                };
                
                document.head.appendChild(script);
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            testNextPath();
        </script>
    </body>
    </html>
    """
    return Response(content=html_content, media_type="text/html")

# ===========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# ===========================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫"""
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    if any(request.url.path.startswith(prefix) for prefix in ["/static", "/js", "/css"]):
        logger.warning(f"üìÇ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {request.url.path}")
        
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "success": False,
                "error": f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {request.url.path}",
                "suggestions": [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ StaticFiles –≤ main.py"
                ],
                "available_paths": ["/static/", "/js/", "/css/", "/files/"],
                "timestamp": datetime.now().isoformat()
            }
        )
    
    logger.warning(f"HTTP {exc.status_code}: {exc.detail} - {request.url}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc} - {request.url}")
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "status_code": 500,
            "timestamp": datetime.now().isoformat()
        }
    )

# ===========================
# STARTUP/SHUTDOWN
# ===========================

@app.on_event("startup")
async def startup_event():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Oky Docky...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –µ—â–µ —Ä–∞–∑
    ensure_directories()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
    js_files = list(Path("/workspaces/oky-docky/oky-docky/FRONTEND_UI/JS").rglob("*.js")) if Path("FRONTEND_UI").exists() else []
    css_files = list(Path("/workspaces/oky-docky/oky-docky/FRONTEND_UI/CSS").rglob("*.css")) if Path("FRONTEND_UI").exists() else []
    html_files = list(Path("/workspaces/oky-docky/oky-docky/FRONTEND_UI/HTML").rglob("*.html")) if Path("FRONTEND_UI").exists() else []
    templates_count = len(list(Path("templates").glob("*.json")))
    
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    logger.info(f"   üìú JS —Ñ–∞–π–ª–æ–≤: {len(js_files)}")
    logger.info(f"   üé® CSS —Ñ–∞–π–ª–æ–≤: {len(css_files)}")
    logger.info(f"   üì∞ HTML —Ñ–∞–π–ª–æ–≤: {len(html_files)}")
    logger.info(f"   üìÑ –®–∞–±–ª–æ–Ω–æ–≤: {templates_count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if js_files:
        logger.info("üìú JS —Ñ–∞–π–ª—ã:")
        for js_file in js_files:
            logger.info(f"   - {js_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π JS —Ñ–∞–π–ª
    main_js_path = Path("FRONTEND_UI/JS/SCRIPTS/main.js")
    if main_js_path.exists():
        size = main_js_path.stat().st_size
        logger.info(f"‚úÖ main.js –Ω–∞–π–¥–µ–Ω: {size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        try:
            with open(main_js_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'class OkyDockyApp' in content:
                    logger.info("‚úÖ –ö–ª–∞—Å—Å OkyDockyApp –Ω–∞–π–¥–µ–Ω –≤ main.js")
                else:
                    logger.warning("‚ö†Ô∏è –ö–ª–∞—Å—Å OkyDockyApp –ù–ï –Ω–∞–π–¥–µ–Ω –≤ main.js")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è main.js: {e}")
    else:
        logger.error("‚ùå main.js –ù–ï –ù–ê–ô–î–ï–ù!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ URL
    logger.info("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏:")
    logger.info("   üìç –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:8000/")
    logger.info("   üìç API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    logger.info("   üìç –¢–µ—Å—Ç JS: http://localhost:8000/test-js")
    logger.info("   üìç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏–∫–∏: http://localhost:8000/debug/static-check")
    logger.info("   üìç –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: http://localhost:8000/static/")
    logger.info("   üìç JS —Ñ–∞–π–ª—ã: http://localhost:8000/js/")
    
    if static_setup_success:
        logger.info("üéâ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤!")
    
    logger.info("üéâ Oky Docky –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Oky Docky...")

# ===========================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–õ–£–ñ–ï–ë–ù–´–ï –†–û–£–¢–´
# ===========================

@app.get("/favicon.ico")
async def favicon():
    """–§–∞–≤–∏–∫–æ–Ω"""
    return Response(status_code=204)

# –ü—Ä—è–º–æ–π —Ä–æ—É—Ç –¥–ª—è main.js (–µ—Å–ª–∏ StaticFiles –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
@app.get("/main.js")
async def serve_main_js():
    """–ü—Ä—è–º–∞—è –æ—Ç–¥–∞—á–∞ main.js"""
    main_js_path = Path("FRONTEND_UI/JS/SCRIPTS/main.js")
    
    if main_js_path.exists():
        logger.info(f"üìú –û—Ç–¥–∞–µ–º main.js –Ω–∞–ø—Ä—è–º—É—é: {main_js_path}")
        return FileResponse(
            main_js_path,
            media_type="application/javascript",
            filename="main.js"
        )
    else:
        logger.error("‚ùå main.js –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–¥–∞—á–∏")
        raise HTTPException(status_code=404, detail="main.js –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è main.js 
@app.get("/static/main.js")
async def serve_main_js_alt():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è main.js"""
    return await serve_main_js()

# ===========================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–û–í
# ===========================

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ API –º–∞—Ä—à—Ä—É—Ç—ã
app.include_router(router)

logger.info("‚úÖ main.py –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
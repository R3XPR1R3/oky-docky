"""
Oky Docky - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
Main –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ FastAPI –° –ü–û–î–î–ï–†–ñ–ö–û–ô –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import HTTPException
from fastapi.staticfiles import StaticFiles
from pathlib import Path
import os
import logging
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—É—Ç–µ—Ä
from myroutes import router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="Oky Docky API",
    description="üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
    version="2.0",
    docs_url="/docs",  # Swagger UI
    redoc_url="/redoc"  # ReDoc
)

# ===========================
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –§–ê–ô–õ–û–í
# ===========================

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
static_dirs = [
    "FRONTEND_UI",
    "FRONTEND_UI/JS",
    "FRONTEND_UI/JS/SCRIPTS",
    "FRONTEND_UI/CSS",
    "FRONTEND_UI/HTML",
    "generated_files",
    "templates"
]

for dir_path in static_dirs:
    Path(dir_path).mkdir(parents=True, exist_ok=True)
    logger.info(f"üìÅ –ü–∞–ø–∫–∞ {dir_path} –≥–æ—Ç–æ–≤–∞")

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
try:
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    app.mount("/static", StaticFiles(directory="FRONTEND_UI"), name="static")
    logger.info("üìÇ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã: /static -> FRONTEND_UI")
    
    # JS —Ñ–∞–π–ª—ã (–¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
    if Path("FRONTEND_UI/JS").exists():
        app.mount("/js", StaticFiles(directory="FRONTEND_UI/JS"), name="js")
        logger.info("üìú JS —Ñ–∞–π–ª—ã —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã: /js -> FRONTEND_UI/JS")
    
    # CSS —Ñ–∞–π–ª—ã
    if Path("FRONTEND_UI/CSS").exists():
        app.mount("/css", StaticFiles(directory="FRONTEND_UI/CSS"), name="css")
        logger.info("üé® CSS —Ñ–∞–π–ª—ã —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã: /css -> FRONTEND_UI/CSS")
    
    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if Path("generated_files").exists():
        app.mount("/files", StaticFiles(directory="generated_files"), name="files")
        logger.info("üìÑ –§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: /files -> generated_files")
        
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# ===========================
# MIDDLEWARE
# ===========================

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = datetime.now()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    process_time = (datetime.now() - start_time).total_seconds()
    
    # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥
    if not any(request.url.path.startswith(prefix) for prefix in ["/static", "/css", "/js", "/files"]):
        logger.info(
            f"{request.method} {request.url.path} - "
            f"Status: {response.status_code} - "
            f"Time: {process_time:.3f}s"
        )
    
    return response

# ===========================
# STARTUP/SHUTDOWN
# ===========================

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Oky Docky...")
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    folders_to_create = [
        Path("templates"),
        Path("generated_files"),
        Path("logs"),
        Path("FRONTEND_UI/JS/SCRIPTS"),
        Path("FRONTEND_UI/CSS"),
        Path("FRONTEND_UI/HTML")
    ]
    
    for folder in folders_to_create:
        folder.mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ {folder} –≥–æ—Ç–æ–≤–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    templates_count = len(list(Path("templates").glob("*.json")))
    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    js_files = list(Path("FRONTEND_UI/JS").rglob("*.js"))
    css_files = list(Path("FRONTEND_UI/CSS").rglob("*.css"))
    html_files = list(Path("FRONTEND_UI/HTML").rglob("*.html"))
    
    logger.info(f"üìú JS —Ñ–∞–π–ª–æ–≤: {len(js_files)}")
    logger.info(f"üé® CSS —Ñ–∞–π–ª–æ–≤: {len(css_files)}")  
    logger.info(f"üì∞ HTML —Ñ–∞–π–ª–æ–≤: {len(html_files)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏
    logger.info("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏:")
    logger.info("   üìç –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:8000/")
    logger.info("   üìç API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    logger.info("   üìç –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: http://localhost:8000/static/")
    logger.info("   üìç JS —Ñ–∞–π–ª—ã: http://localhost:8000/js/")
    logger.info("   üìç CSS —Ñ–∞–π–ª—ã: http://localhost:8000/css/")
    
    logger.info("üéâ Oky Docky –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Oky Docky...")

# ===========================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö
# ===========================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–ö—Ä–∞—Å–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫"""
    logger.warning(f"HTTP {exc.status_code}: {exc.detail} - {request.url}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc} - {request.url}")
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "status_code": 500,
            "timestamp": datetime.now().isoformat()
        }
    )

# ===========================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–û–£–¢–´ –î–õ–Ø –°–¢–ê–¢–ò–ö–ò
# ===========================

@app.get("/favicon.ico")
async def favicon():
    """–§–∞–≤–∏–∫–æ–Ω"""
    return {"message": "No favicon"}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
@app.get("/workspaces/oky-docky/oky-docky/FRONTEND_UI/JS/SCRIPTS/main.js")
async def main_js_alt():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è main.js"""
    try:
        js_file = Path("FRONTEND_UI/JS/SCRIPTS/main.js")
        if js_file.exists():
            with open(js_file, 'r', encoding='utf-8') as f:
                content = f.read()
            return Response(content=content, media_type="application/javascript")
        else:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {js_file}")
            raise HTTPException(status_code=404, detail="main.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è main.js: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
@app.get("/debug/static-files")
async def debug_static_files():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö"""
    try:
        static_info = {
            "frontend_ui_exists": Path("FRONTEND_UI").exists(),
            "js_dir_exists": Path("FRONTEND_UI/JS").exists(),
            "main_js_exists": Path("FRONTEND_UI/JS/SCRIPTS/main.js").exists(),
            "files": {
                "js": [str(f) for f in Path("FRONTEND_UI/JS").rglob("*.js")] if Path("FRONTEND_UI/JS").exists() else [],
                "css": [str(f) for f in Path("FRONTEND_UI/CSS").rglob("*.css")] if Path("FRONTEND_UI/CSS").exists() else [],
                "html": [str(f) for f in Path("FRONTEND_UI/HTML").rglob("*.html")] if Path("FRONTEND_UI/HTML").exists() else []
            },
            "mounted_paths": {
                "/static": "FRONTEND_UI",
                "/js": "FRONTEND_UI/JS", 
                "/css": "FRONTEND_UI/CSS",
                "/files": "generated_files"
            }
        }
        
        return static_info
        
    except Exception as e:
        return {"error": str(e)}

# ===========================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–û–í
# ===========================

# –í–°–ï API –ü–£–¢–ò –¢–û–õ–¨–ö–û –í –†–û–£–¢–ï–†–ï!
app.include_router(router)

# –ò–º–ø–æ—Ä—Ç Response –¥–ª—è main.js —Ä–æ—É—Ç–∞
from fastapi.responses import Response

logger.info("‚úÖ main.py –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
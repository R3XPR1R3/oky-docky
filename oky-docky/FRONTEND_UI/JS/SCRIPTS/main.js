/**
 * ========================================
 * OKY DOCKY - –ì–õ–ê–í–ù–´–ô JAVASCRIPT –§–ê–ô–õ
 * –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API + Anime.js –∞–Ω–∏–º–∞—Ü–∏–∏
 * ========================================
 */

class OkyDockyApp {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        this.apiBase = window.location.origin + '/api';
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.templates = {};
        this.currentTemplate = null;
        this.currentFieldData = null;
        this.isLoading = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        this.theme = localStorage.getItem('oky-theme') || 'light';
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.elements = {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            header: document.getElementById('header'),
            themeToggle: document.getElementById('themeToggle'),
            navLinks: document.querySelectorAll('.nav-link'),
            
            // Hero —Å–µ–∫—Ü–∏—è
            heroTitle: document.getElementById('heroTitle'),
            heroSubtitle: document.getElementById('heroSubtitle'),
            heroCta: document.getElementById('heroCta'),
            stats: document.getElementById('stats'),
            
            // –ü–æ–∏—Å–∫ –∏ —à–∞–±–ª–æ–Ω—ã
            searchInput: document.getElementById('searchInput'),
            templatesGrid: document.getElementById('templatesGrid'),
            emptyState: document.getElementById('emptyState'),
            
            // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            generateModal: document.getElementById('generateModal'),
            formatModal: document.getElementById('formatModal'),
            generateForm: document.getElementById('generateForm'),
            formFields: document.getElementById('formFields'),
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            toast: document.getElementById('toast'),
            toastMessage: document.getElementById('toastMessage')
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * ========================================
     * –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
     * ========================================
     */
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Oky Docky...');
        
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            this.setupTheme();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
            this.initAnimations();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API
            await this.loadTemplates();
            
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
            this.renderTemplates();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await this.loadStats();
            
            console.log('‚úÖ Oky Docky –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }

    /**
     * ========================================
     * –†–ê–ë–û–¢–ê –° API
     * ========================================
     */
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
    async loadTemplates() {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤...');
        
        try {
            this.setLoading(true);
            
            const response = await fetch(`${this.apiBase}/templates`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                this.templates = data.templates || {};
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${data.total || Object.keys(this.templates).length}`);
                
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                Object.entries(this.templates).forEach(([name, template]) => {
                    console.log(`üìÑ ${name}: ${template.stats?.total_placeholders || 0} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`);
                });
                
                return this.templates;
            } else {
                throw new Error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤:', error);
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤. –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...', 'warning');
            
            // Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            this.loadDemoTemplates();
            return this.templates;
            
        } finally {
            this.setLoading(false);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async loadStats() {
        try {
            const response = await fetch(`${this.apiBase}/stats`);
            
            if (response.ok) {
                const stats = await response.json();
                this.updateStatsDisplay(stats);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
        }
    }

    // –û—Ç–ª–∞–¥–∫–∞ —à–∞–±–ª–æ–Ω–∞
    async debugTemplate(templateName) {
        try {
            console.log(`üîç –û—Ç–ª–∞–¥–∫–∞ —à–∞–±–ª–æ–Ω–∞: ${templateName}`);
            
            const response = await fetch(`${this.apiBase}/debug/placeholder_test/${encodeURIComponent(templateName)}`);
            
            if (response.ok) {
                const data = await response.json();
                console.log('üî¨ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', data);
                return data;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    async generateDocument(formatType) {
        if (!this.currentTemplate || !this.currentFieldData) {
            this.showToast('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
            return;
        }

        try {
            console.log(`üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${this.currentTemplate.name}, —Ñ–æ—Ä–º–∞—Ç: ${formatType}`);
            console.log('üìù –î–∞–Ω–Ω—ã–µ:', this.currentFieldData);
            
            this.closeAllModals();
            this.showToast('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...', 'info');
            this.setLoading(true);

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData (–∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –±—ç–∫–µ–Ω–¥)
            const formData = new FormData();
            formData.append('format_type', formatType);
            formData.append('field_data', JSON.stringify(this.currentFieldData));

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            const response = await fetch(`${this.apiBase}/generate/${encodeURIComponent(this.currentTemplate.name)}`, {
                method: 'POST',
                body: formData
            });

            console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', result);

            if (result.success) {
                this.showToast('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', 'success');
                
                // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
                this.animateSuccess();
                
                // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if (result.download_url) {
                    setTimeout(() => {
                        console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${result.download_url}`);
                        window.open(result.download_url, '_blank');
                    }, 1000);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.loadStats();
                
            } else {
                throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
            this.showToast(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
            
        } finally {
            this.setLoading(false);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    async uploadTemplate(file, templateName, templateId = null) {
        try {
            console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞: ${file.name}`);
            
            this.setLoading(true);
            this.showToast('–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞...', 'info');

            const formData = new FormData();
            formData.append('file', file);
            if (templateName) formData.append('name', templateName);
            if (templateId) formData.append('form_id', templateId);

            const response = await fetch(`${this.apiBase}/upload-template`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();

            if (result.success) {
                this.showToast(`–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${result.placeholders_found} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`, 'success');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
                await this.loadTemplates();
                this.renderTemplates();
                
                return result;
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞:', error);
            this.showToast(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
            
        } finally {
            this.setLoading(false);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    async validateVariables(templateId, variables) {
        try {
            const response = await fetch(`${this.apiBase}/validate-variables`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    form_id: templateId,
                    variables: variables
                })
            });

            if (response.ok) {
                return await response.json();
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
        }
        
        return { valid: true }; // Fallback
    }

    /**
     * ========================================
     * –†–ê–ë–û–¢–ê –° –ò–ù–¢–ï–†–§–ï–ô–°–û–ú
     * ========================================
     */

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    renderTemplates(filteredTemplates = null) {
        const templatesToRender = filteredTemplates || this.templates;
        
        if (!this.elements.templatesGrid) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç templatesGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
        this.elements.templatesGrid.innerHTML = '';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
        if (Object.keys(templatesToRender).length === 0) {
            this.showEmptyState();
            return;
        }

        this.hideEmptyState();

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        Object.values(templatesToRender).forEach((template, index) => {
            const card = this.createTemplateCard(template, index);
            this.elements.templatesGrid.appendChild(card);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        setTimeout(() => this.animateCards(), 100);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —à–∞–±–ª–æ–Ω–∞
    createTemplateCard(template, index) {
        const card = document.createElement('div');
        card.className = 'card';
        card.style.cursor = 'pointer';
        card.dataset.templateName = template.name;

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        const tags = Object.keys(template.placeholders || {}).slice(0, 5).map(placeholder => 
            `<span class="tag">{${placeholder}}</span>`
        ).join('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        const totalPlaceholders = Object.keys(template.placeholders || {}).length;
        const moreTags = totalPlaceholders > 5 ? `<span class="tag">+${totalPlaceholders - 5}</span>` : '';

        card.innerHTML = `
            <div class="card-header">
                <div class="card-icon">${this.getFileIcon(template.name)}</div>
                <div>
                    <div class="card-title">${this.getTemplateDisplayName(template.name)}</div>
                    <div style="font-size: 0.75rem; color: var(--text-muted);">
                        ${template.stats?.total_placeholders || 0} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ‚Ä¢ ${this.formatFileSize(template.file_size)}
                    </div>
                </div>
            </div>
            
            <div class="card-description">
                ${template.original_filename || template.name}<br>
                <small style="color: var(--text-muted);">
                    –ó–∞–≥—Ä—É–∂–µ–Ω: ${this.formatDate(template.uploaded_at)}
                </small>
            </div>
            
            <div class="tags" style="margin: 1rem 0;">
                ${tags}${moreTags}
            </div>
            
            <div style="display: flex; gap: 0.5rem; margin-top: auto;">
                <button class="btn btn-primary" style="flex: 1;" onclick="app.openGenerateForm('${template.name}')">
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                </button>
                <button class="btn btn-ghost" onclick="app.debugTemplate('${template.name}')" title="–û—Ç–ª–∞–¥–∫–∞">
                    üîç
                </button>
            </div>
        `;

        return card;
    }

    // –§–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    openGenerateForm(templateName) {
        console.log(`üìù –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è: ${templateName}`);
        
        const template = this.templates[templateName];
        if (!template) {
            this.showToast('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        this.currentTemplate = template;
        this.renderGenerateForm(template);
        this.showModal('generateModal');
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    renderGenerateForm(template) {
        if (!this.elements.formFields) return;

        this.elements.formFields.innerHTML = '';

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ
        const templateInfo = document.createElement('div');
        templateInfo.style.cssText = 'margin-bottom: 1.5rem; padding: 1rem; background: var(--bg-secondary); border-radius: 8px;';
        templateInfo.innerHTML = `
            <div style="font-weight: 600; margin-bottom: 0.5rem;">üìÑ ${this.getTemplateDisplayName(template.name)}</div>
            <div style="font-size: 0.875rem; color: var(--text-secondary);">
                ${template.stats?.total_placeholders || 0} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ‚Ä¢ ${template.stats?.total_occurrences || 0} –≤—Ö–æ–∂–¥–µ–Ω–∏–π
            </div>
        `;
        this.elements.formFields.appendChild(templateInfo);

        // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        const formFields = template.form_fields || this.generateFallbackFields(template);
        
        formFields.forEach(field => {
            const fieldElement = this.createFormField(field);
            this.elements.formFields.appendChild(fieldElement);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
        setTimeout(() => {
            const fields = this.elements.formFields.querySelectorAll('.input-group');
            anime({
                targets: fields,
                opacity: [0, 1],
                translateY: [10, 0],
                duration: 400,
                easing: 'easeOutCubic',
                delay: anime.stagger(100)
            });
        }, 100);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    createFormField(field) {
        const div = document.createElement('div');
        div.className = 'input-group';

        let inputElement;
        
        switch (field.type) {
            case 'textarea':
                inputElement = `
                    <textarea 
                        name="${field.name}" 
                        placeholder="${field.placeholder || ''}" 
                        ${field.required ? 'required' : ''} 
                        class="input" 
                        style="min-height: 100px; resize: vertical;"
                    ></textarea>`;
                break;
                
            case 'select':
                const options = field.options?.map(opt => 
                    `<option value="${opt.value}">${opt.label}</option>`
                ).join('') || '';
                inputElement = `
                    <select name="${field.name}" ${field.required ? 'required' : ''} class="input">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                        ${options}
                    </select>`;
                break;
                
            case 'date':
                inputElement = `
                    <input 
                        type="date" 
                        name="${field.name}" 
                        ${field.required ? 'required' : ''} 
                        class="input"
                        value="${new Date().toISOString().split('T')[0]}"
                    >`;
                break;
                
            default:
                inputElement = `
                    <input 
                        type="${field.type}" 
                        name="${field.name}" 
                        placeholder="${field.placeholder || ''}" 
                        ${field.required ? 'required' : ''} 
                        class="input"
                    >`;
        }

        div.innerHTML = `
            <label class="input-label">
                ${field.label} 
                ${field.required ? '<span style="color: var(--error);">*</span>' : ''}
                ${field.occurrences > 1 ? `<small>(–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ${field.occurrences} —Ä–∞–∑)</small>` : ''}
            </label>
            ${inputElement}
            ${field.validation?.message ? 
                `<small style="color: var(--text-muted); margin-top: 0.25rem; display: block;">
                    ${field.validation.message}
                </small>` : ''
            }
        `;

        return div;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async handleFormSubmit(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        const fieldData = {};

        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for (let [key, value] of formData.entries()) {
            fieldData[key] = value.trim();
        }

        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', fieldData);

        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const emptyFields = Object.entries(fieldData).filter(([key, value]) => !value);
        if (emptyFields.length > 0) {
            this.showToast('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'warning');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if (this.currentTemplate.id) {
            const validation = await this.validateVariables(this.currentTemplate.id, fieldData);
            if (!validation.valid) {
                this.showToast('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'warning');
                return;
            }
        }

        this.currentFieldData = fieldData;
        this.closeModal('generateModal');
        this.showModal('formatModal');
    }

    /**
     * ========================================
     * –ê–ù–ò–ú–ê–¶–ò–ò –° ANIME.JS
     * ========================================
     */

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    initAnimations() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–µ–¥–µ—Ä–∞
        anime({
            targets: this.elements.header,
            opacity: [0, 1],
            translateY: ['-100%', '0%'],
            duration: 800,
            easing: 'easeOutCubic',
            delay: 100
        });

        // Hero —Å–µ–∫—Ü–∏—è
        const heroTimeline = anime.timeline();
        
        if (this.elements.heroTitle) {
            heroTimeline.add({
                targets: this.elements.heroTitle,
                opacity: [0, 1],
                translateY: [30, 0],
                duration: 1000,
                easing: 'easeOutCubic'
            });
        }
        
        if (this.elements.heroSubtitle) {
            heroTimeline.add({
                targets: this.elements.heroSubtitle,
                opacity: [0, 1],
                translateY: [30, 0],
                duration: 800,
                easing: 'easeOutCubic'
            }, '-=700');
        }
        
        if (this.elements.heroCta) {
            heroTimeline.add({
                targets: this.elements.heroCta,
                opacity: [0, 1],
                translateY: [30, 0],
                duration: 600,
                easing: 'easeOutCubic'
            }, '-=500');
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
        if (this.elements.searchInput) {
            anime({
                targets: this.elements.searchInput.closest('.search-container'),
                opacity: [0, 1],
                translateY: [20, 0],
                duration: 600,
                easing: 'easeOutCubic',
                delay: 1500
            });
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        this.animateStats();
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    animateStats() {
        if (!this.elements.stats) return;

        const statItems = this.elements.stats.querySelectorAll('.stat-item');
        
        statItems.forEach((item, index) => {
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            anime({
                targets: item,
                opacity: [0, 1],
                translateY: [20, 0],
                duration: 600,
                easing: 'easeOutCubic',
                delay: 2000 + (index * 200)
            });

            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            const numberEl = item.querySelector('.stat-number');
            if (!numberEl) return;
            
            const targetCount = parseInt(numberEl.getAttribute('data-count') || '0');
            
            anime({
                targets: { count: 0 },
                count: targetCount,
                duration: 2000,
                easing: 'easeOutCubic',
                delay: 2200 + (index * 200),
                update: function(anim) {
                    const currentCount = Math.round(anim.animations[0].currentValue);
                    const suffix = numberEl.dataset.suffix || '+';
                    numberEl.textContent = currentCount + suffix;
                }
            });
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    animateCards() {
        const cards = this.elements.templatesGrid?.querySelectorAll('.card');
        if (!cards || cards.length === 0) return;
        
        anime({
            targets: cards,
            opacity: [0, 1],
            translateY: [30, 0],
            scale: [0.95, 1],
            duration: 600,
            easing: 'easeOutCubic',
            delay: anime.stagger(100)
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    animateSuccess() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const successElement = document.createElement('div');
        successElement.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 4rem;
            z-index: 9999;
            pointer-events: none;
        `;
        successElement.textContent = 'üéâ';
        document.body.appendChild(successElement);

        anime({
            targets: successElement,
            scale: [0, 1.5, 1],
            rotate: [0, 360],
            opacity: [0, 1, 0],
            duration: 2000,
            easing: 'easeOutElastic(1, .8)',
            complete: () => {
                document.body.removeChild(successElement);
            }
        });
    }

    /**
     * ========================================
     * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
     * ========================================
     */

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    setupTheme() {
        document.documentElement.setAttribute('data-theme', this.theme);
        if (this.elements.themeToggle && this.theme === 'dark') {
            this.elements.themeToggle.classList.add('active');
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        this.theme = this.theme === 'light' ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', this.theme);
        localStorage.setItem('oky-theme', this.theme);
        
        if (this.elements.themeToggle) {
            this.elements.themeToggle.classList.toggle('active');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        this.elements.themeToggle?.addEventListener('click', () => this.toggleTheme());

        // –ü–æ–∏—Å–∫
        this.elements.searchInput?.addEventListener('input', (e) => {
            this.filterTemplates(e.target.value);
        });

        // –§–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        this.elements.generateForm?.addEventListener('submit', (e) => {
            this.handleFormSubmit(e);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });

        // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.closeAllModals();
            }
        });
    }

    // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filterTemplates(searchTerm) {
        if (!searchTerm.trim()) {
            this.renderTemplates();
            return;
        }

        const filtered = {};
        const term = searchTerm.toLowerCase();

        Object.entries(this.templates).forEach(([key, template]) => {
            const searchableText = [
                template.name,
                template.original_filename,
                ...Object.keys(template.placeholders || {})
            ].join(' ').toLowerCase();

            if (searchableText.includes(term)) {
                filtered[key] = template;
            }
        });

        this.renderTemplates(filtered);
    }

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('active');
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            anime({
                targets: modal.querySelector('.modal-content'),
                scale: [0.9, 1],
                opacity: [0, 1],
                duration: 300,
                easing: 'easeOutCubic'
            });
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }

    closeAllModals() {
        document.querySelectorAll('.modal.active').forEach(modal => {
            modal.classList.remove('active');
        });
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showToast(message, type = 'info') {
        if (!this.elements.toast || !this.elements.toastMessage) return;

        this.elements.toastMessage.textContent = message;
        this.elements.toast.className = `toast show ${type}`;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        anime({
            targets: this.elements.toast,
            translateX: ['100%', '0%'],
            duration: 300,
            easing: 'easeOutCubic'
        });

        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            anime({
                targets: this.elements.toast,
                translateX: ['0%', '100%'],
                duration: 300,
                easing: 'easeInCubic',
                complete: () => {
                    this.elements.toast.classList.remove('show', type);
                }
            });
        }, type === 'error' ? 5000 : 3000);
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setLoading(isLoading) {
        this.isLoading = isLoading;
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (isLoading) {
            document.body.style.cursor = 'wait';
        } else {
            document.body.style.cursor = '';
        }
    }

    // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    showEmptyState() {
        if (this.elements.emptyState) {
            this.elements.emptyState.classList.remove('hidden');
        }
    }

    hideEmptyState() {
        if (this.elements.emptyState) {
            this.elements.emptyState.classList.add('hidden');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatsDisplay(stats) {
        const statItems = [
            { selector: '[data-stat="templates"]', value: stats.templates_count || 0 },
            { selector: '[data-stat="generated"]', value: stats.generated_files_count || 0 },
            { selector: '[data-stat="variables"]', value: stats.total_variables || 0 }
        ];

        statItems.forEach(({ selector, value }) => {
            const element = document.querySelector(selector);
            if (element) {
                element.setAttribute('data-count', value);
            }
        });

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.animateStats();
    }

    // –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    getTemplateDisplayName(filename) {
        return filename.split('.')[0]
            .replace(/_/g, ' ')
            .replace(/\b\w/g, l => l.toUpperCase());
    }

    getFileIcon(filename) {
        const extension = filename.split('.').pop().toLowerCase();
        
        const icons = {
            'pdf': 'üìÑ',
            'docx': 'üìù',
            'doc': 'üìù',
            'txt': 'üìã',
            'rtf': 'üìÑ'
        };
        
        return icons[extension] || 'üìÑ';
    }

    formatFileSize(bytes) {
        if (!bytes) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }

    formatDate(dateString) {
        if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch {
            return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –ø–æ–ª–µ–π –µ—Å–ª–∏ –Ω–µ—Ç form_fields
    generateFallbackFields(template) {
        const placeholders = Object.keys(template.placeholders || {});
        
        return placeholders.map(placeholder => ({
            name: placeholder,
            label: this.generateFieldLabel(placeholder),
            type: this.detectFieldType(placeholder),
            required: true,
            placeholder: `–í–≤–µ–¥–∏—Ç–µ ${this.generateFieldLabel(placeholder).toLowerCase()}`,
            validation: {},
            occurrences: template.placeholders[placeholder]?.count || 1
        }));
    }

    generateFieldLabel(fieldName) {
        // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        const translations = {
            'name': '–ò–º—è',
            'firstname': '–ò–º—è',
            'lastname': '–§–∞–º–∏–ª–∏—è',
            'email': 'Email',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'date': '–î–∞—Ç–∞',
            'address': '–ê–¥—Ä–µ—Å',
            'city': '–ì–æ—Ä–æ–¥',
            'company': '–ö–æ–º–ø–∞–Ω–∏—è',
            'position': '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
            'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'amount': '–°—É–º–º–∞',
            'price': '–¶–µ–Ω–∞',
            'quantity': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        };
        
        const lower = fieldName.toLowerCase();
        if (translations[lower]) {
            return translations[lower];
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        return fieldName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    detectFieldType(fieldName) {
        const name = fieldName.toLowerCase();
        
        if (name.includes('email') || name.includes('mail')) return 'email';
        if (name.includes('phone') || name.includes('tel')) return 'tel';
        if (name.includes('date') || name.includes('–¥–∞—Ç–∞')) return 'date';
        if (name.includes('url') || name.includes('website')) return 'url';
        if (name.includes('number') || name.includes('amount') || name.includes('price')) return 'number';
        if (name.includes('description') || name.includes('comment') || name.includes('text')) return 'textarea';
        
        return 'text';
    }

    // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
    loadDemoTemplates() {
        console.log('üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...');
        
        this.templates = {
            'demo_contract.pdf': {
                name: 'demo_contract.pdf',
                original_filename: '–î–µ–º–æ –¥–æ–≥–æ–≤–æ—Ä.pdf',
                id: 'demo_001',
                uploaded_at: new Date().toISOString(),
                file_size: 25600,
                placeholders: {
                    'name': { name: 'name', count: 2, positions: [100, 500] },
                    'date': { name: 'date', count: 1, positions: [200] },
                    'company': { name: 'company', count: 3, positions: [300, 400, 600] },
                    'email': { name: 'email', count: 1, positions: [700] }
                },
                form_fields: [
                    {
                        name: 'name',
                        label: '–ü–æ–ª–Ω–æ–µ –∏–º—è',
                        type: 'text',
                        required: true,
                        placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è',
                        occurrences: 2
                    },
                    {
                        name: 'email',
                        label: 'Email –∞–¥—Ä–µ—Å',
                        type: 'email',
                        required: true,
                        placeholder: 'your@email.com',
                        validation: {
                            pattern: '^[^\\s@]+@[^\\s@]+\\.[^\\s@]+',
                            message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
                        },
                        occurrences: 1
                    },
                    {
                        name: 'date',
                        label: '–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è',
                        type: 'date',
                        required: true,
                        placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
                        occurrences: 1
                    },
                    {
                        name: 'company',
                        label: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
                        type: 'text',
                        required: true,
                        placeholder: '–û–û–û "–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞"',
                        occurrences: 3
                    }
                ],
                stats: {
                    total_placeholders: 4,
                    total_occurrences: 7
                }
            },
            'demo_invoice.pdf': {
                name: 'demo_invoice.pdf',
                original_filename: '–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.pdf',
                id: 'demo_002',
                uploaded_at: new Date(Date.now() - 86400000).toISOString(), // –≤—á–µ—Ä–∞
                file_size: 18432,
                placeholders: {
                    'client_name': { name: 'client_name', count: 1, positions: [150] },
                    'amount': { name: 'amount', count: 2, positions: [250, 350] },
                    'invoice_number': { name: 'invoice_number', count: 1, positions: [50] }
                },
                form_fields: [
                    {
                        name: 'invoice_number',
                        label: '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞',
                        type: 'text',
                        required: true,
                        placeholder: 'INV-001',
                        occurrences: 1
                    },
                    {
                        name: 'client_name',
                        label: '–ö–ª–∏–µ–Ω—Ç',
                        type: 'text',
                        required: true,
                        placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞',
                        occurrences: 1
                    },
                    {
                        name: 'amount',
                        label: '–°—É–º–º–∞',
                        type: 'number',
                        required: true,
                        placeholder: '10000',
                        validation: {
                            min: 0,
                            message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'
                        },
                        occurrences: 2
                    }
                ],
                stats: {
                    total_placeholders: 3,
                    total_occurrences: 4
                }
            }
        };
    }

    /**
     * ========================================
     * –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï API –ú–ï–¢–û–î–´
     * ========================================
     */

    // –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    async deleteTemplate(templateId) {
        try {
            const response = await fetch(`${this.apiBase}/template/${templateId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                const result = await response.json();
                this.showToast('–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω', 'success');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
                await this.loadTemplates();
                this.renderTemplates();
                
                return result;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            this.showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞', 'error');
        }
    }

    // –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    async rescanTemplates() {
        try {
            this.showToast('–ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤...', 'info');
            
            const response = await fetch(`${this.apiBase}/rescan_templates`, {
                method: 'POST'
            });

            if (response.ok) {
                const result = await response.json();
                this.showToast(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${result.total_templates}`, 'success');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
                await this.loadTemplates();
                this.renderTemplates();
                
                return result;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.showToast('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
    async getTemplateInfo(templateName) {
        try {
            const response = await fetch(`${this.apiBase}/template/${encodeURIComponent(templateName)}`);
            
            if (response.ok) {
                return await response.json();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ:', error);
        }
        
        return null;
    }

    /**
     * ========================================
     * –ü–†–û–î–í–ò–ù–£–¢–´–ï –§–£–ù–ö–¶–ò–ò UI
     * ========================================
     */

    // Drag & Drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    setupDragAndDrop(dropZoneElement) {
        if (!dropZoneElement) return;

        const dragEvents = ['dragenter', 'dragover', 'dragleave', 'drop'];
        
        dragEvents.forEach(eventName => {
            dropZoneElement.addEventListener(eventName, this.preventDefaults, false);
        });

        dropZoneElement.addEventListener('dragenter', () => this.highlight(dropZoneElement));
        dropZoneElement.addEventListener('dragover', () => this.highlight(dropZoneElement));
        dropZoneElement.addEventListener('dragleave', () => this.unhighlight(dropZoneElement));
        dropZoneElement.addEventListener('drop', (e) => {
            this.unhighlight(dropZoneElement);
            this.handleDrop(e);
        });
    }

    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    highlight(element) {
        element.classList.add('dragover');
    }

    unhighlight(element) {
        element.classList.remove('dragover');
    }

    async handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;

        if (files.length > 0) {
            const file = files[0];
            
            if (file.type === 'application/pdf') {
                await this.uploadTemplate(file, file.name);
            } else {
                this.showToast('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã', 'warning');
            }
        }
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + K –¥–ª—è –ø–æ–∏—Å–∫–∞
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                this.elements.searchInput?.focus();
            }
            
            // Ctrl/Cmd + U –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            if ((e.ctrlKey || e.metaKey) && e.key === 'u') {
                e.preventDefault();
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
            }
            
            // Ctrl/Cmd + R –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
                e.preventDefault();
                this.loadTemplates().then(() => this.renderTemplates());
            }
        });
    }

    // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤)
    setupInfiniteScroll() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ —à–∞–±–ª–æ–Ω–æ–≤
                    this.loadMoreTemplates();
                }
            });
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
        const sentinel = document.createElement('div');
        sentinel.style.height = '1px';
        this.elements.templatesGrid?.appendChild(sentinel);
        observer.observe(sentinel);
    }

    async loadMoreTemplates() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...');
    }

    /**
     * ========================================
     * –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
     * ========================================
     */

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    logEvent(eventName, data = {}) {
        const eventData = {
            timestamp: new Date().toISOString(),
            event: eventName,
            data: data,
            userAgent: navigator.userAgent,
            url: window.location.href
        };
        
        console.log('üìä Event:', eventData);
        
        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        // this.sendAnalytics(eventData);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    measurePerformance(label, fn) {
        const start = performance.now();
        const result = fn();
        const end = performance.now();
        
        console.log(`‚è±Ô∏è ${label}: ${(end - start).toFixed(2)}ms`);
        return result;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    async healthCheck() {
        try {
            const response = await fetch(`${this.apiBase.replace('/api', '')}/health`);
            const health = await response.json();
            
            console.log('üíä Health Check:', health);
            return health;
            
        } catch (error) {
            console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return { status: 'error', message: error.message };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    async getAppInfo() {
        try {
            const response = await fetch(`${this.apiBase.replace('/api', '')}/info`);
            return await response.json();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
            return null;
        }
    }
}

/**
 * ========================================
 * –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
 * ========================================
 */

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
let app;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üåü Oky Docky –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = new OkyDockyApp();
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        window.app = app; // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (e) => {
            console.error('üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', e.error);
            app.showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
        window.addEventListener('unhandledrejection', (e) => {
            console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', e.reason);
            app.showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.', 'error');
        });
        
        console.log('üéâ Oky Docky –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω!');
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        document.body.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; height: 100vh; flex-direction: column; font-family: Arial, sans-serif;">
                <h1 style="color: #ef4444; margin-bottom: 1rem;">üòµ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
                <p style="color: #666; margin-bottom: 2rem;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
                <button onclick="location.reload()" style="padding: 0.75rem 1.5rem; background: #6366f1; color: white; border: none; border-radius: 6px; cursor: pointer;">
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        `;
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å HTML
function generateDocument(formatType) {
    app?.generateDocument(formatType);
}

function closeGenerateModal() {
    app?.closeModal('generateModal');
}

function closeFormatModal() {
    app?.closeModal('formatModal');
}

function openGenerateForm(templateName) {
    app?.openGenerateForm(templateName);
}

function debugTemplate(templateName) {
    app?.debugTemplate(templateName);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = OkyDockyApp;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
const Utils = {
    // Debounce –¥–ª—è –ø–æ–∏—Å–∫–∞
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },
    
    // Throttle –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    },
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            return true;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            return false;
        }
    },
    
    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    downloadFile(url, filename) {
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
};

console.log('üìÑ main.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
